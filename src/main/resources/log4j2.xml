<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别优先级，从低到高：all < trace < debug < info < warn < error < fatal < off -->
<!-- status用于设置log4j2自身内部信息输出，可以不设置 -->
<!-- monitorInterval:log4j能够自动检测修配置文件和重新配置本身，设置间隔秒数 -->
<configuration status="WARN" monitorInterval="1800">
    <!-- 先定义appender：日志需要输出的地方 -->
    <appenders>
        <!-- 输出到控制台的配置 -->
        <console name="Console" target="SYSTEM_OUT">
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] [%p] -%l -%m%n"/>
        </console>

        <!-- 日志文件打印出所有信息,这个log每次运行都会自动清空,由append属性决定，适合临时测试用 -->
        <File name="textlog" fileName="log/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!-- 日志会打印出info及以下级别的信息,每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFileInfo" fileName="D:/log/info.log"
                     filePattern="${sys:user.home}/log/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <!-- 控制台只输出level及以上级别的信息(onMatch)，其它的直接拒绝(onMisMath) -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMisMatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
        <RollingFile name="RollingFileWarn" fileName="D:/log/warn.log"
                     filePattern="${sys:user.home}/log/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="D:/log/error.log"
                     filePattern="${sys:user.home}/log/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

        <!-- 当日志文件超过一定大小。另起一个文件继续写入日志 -->
        <RollingRandomAccessFile name="RollingRandomAccessFile" fileName="${LOG_HOME}/${FILE_NAME}.log" filePattern="${LOG_HOME}/$${date:yyyy-MM}/%d{yyyy-MM-dd HH-mm}-%i.log">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 每隔一分钟产生一个文件，主要看filePattern中的%d -->
                <SizeBasedTriggeringPolicy size="10 MB"/> <!-- 指定当文件体积大于size指定的值时，触发Rolling -->
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingRandomAccessFile>

        <Async name="AsyncAppender">
            <AppenderRef ref="RollingRandomAccessFile"/>
        </Async>

        <!-- 配置databaseAppender，将日志信息输出到数据库中 -->
        <!--<JDBC name="databaseAppender" tableName="log2">
            <ConnectionFactory class="dbconnection.ConnectionFactory" method="getDatabaseConnection"/>
            <Column name="date_add" isEventTimestamp="true"/>
            <Column name="level" pattern="%level"/>
            <Column name="logger" pattern="%logger"/>
            <Column name="message" pattern="%message"/>
            <Column name="exception" pattern="%ex{full}"/>
        </JDBC>-->

        <JDBC name="database" tableName="log">
            <ConnectionFactory class="dbconnection.ConnectionFactory" method="getDatabaseConnection"/>
            <Column name="userid" pattern="%X{userId}"/>
            <Column name="username" pattern="%X{userName}"/>
            <Column name="class" pattern="%c"/>
            <Column name="method" pattern="%M"/>
            <Column name="createtime" isEventTimestamp="true"/>
            <Column name="loglevel" pattern="%-5level"/>
            <Column name="message" pattern="%msg"/>
        </JDBC>

    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="AsyncFileLogger" level="info" additivity="true">
            <appender-ref ref="RollingRandomAccessFile" />
        </logger>

        <root level="all">
            <!-- <appender-ref ref="Console"/> -->
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
            <!-- <appender-ref ref="databaseAppender"/> -->
            <appender-ref ref="database"/>
            <appender-ref ref="AsyncAppender"/>
        </root>
    </loggers>
</configuration>